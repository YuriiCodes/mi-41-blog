// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId      String        @id @unique // Clerk ID as the primary key
  username     String?       // Optional username
  email        String?       @unique // Optional user email
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Post {
  id             String     @id @default(uuid())
  userId         String
  slug           String     @unique
  user           User       @relation(fields: [userId], references: [clerkId])
  title          String
  content        String
  brief          String     @db.VarChar(150) // Brief description, max 150 chars
  readTime       Int        // Estimated read time in minutes
  isPublished    Boolean    @default(false)
  comments       Comment[]
  postLikes      PostLike[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  @@index([slug])
}

model Comment {
  id           String        @id @default(uuid())
  postId       String
  post         Post          @relation(fields: [postId], references: [id])
  userId       String
  user         User          @relation(fields: [userId], references: [clerkId])
  parentId     String?       // For nested comments
  parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]     @relation("CommentReplies")
  content      String
  commentLikes CommentLike[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}
